# =============================================================================
# AlfaIA/main_simple.py - Versi√≥n Simplificada para Testing
# =============================================================================

import sys
import logging
from pathlib import Path
from PyQt6.QtWidgets import QApplication, QMessageBox, QSplashScreen
from PyQt6.QtCore import QTimer, Qt
from PyQt6.QtGui import QPixmap, QColor
try:
    from modules.exercises.exercises_main_widget import ExercisesMainWidget
    print("‚úÖ ExercisesMainWidget importado correctamente")
except ImportError as e:
    print(f"‚ùå Error importando ExercisesMainWidget: {e}")
    ExercisesMainWidget = None


# Configurar logging b√°sico
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Agregar path para imports
sys.path.append(str(Path(__file__).parent))

# IMPORTS SEGUROS
try:
    from config.settings import Settings

    print("‚úÖ Settings importado")
except ImportError as e:
    print(f"‚ùå Error importando Settings: {e}")
    sys.exit(1)

try:
    from core.database.connection import DatabaseManager

    print("‚úÖ DatabaseManager importado")
except ImportError as e:
    print(f"‚ùå Error importando DatabaseManager: {e}")
    sys.exit(1)

try:
    from core.auth.authentication import get_auth_manager

    print("‚úÖ get_auth_manager importado")
except ImportError as e:
    print(f"‚ùå Error importando get_auth_manager: {e}")
    sys.exit(1)


class SimpleAlfaIAApplication:
    """Aplicaci√≥n AlfaIA simplificada"""

    def __init__(self):
        self.app = None
        self.main_window = None
        self.login_window = None
        self.splash = None
        self.settings = Settings()
        print("üèóÔ∏è SimpleAlfaIAApplication inicializada")

    def initialize_app(self) -> bool:
        """Inicializar aplicaci√≥n PyQt6"""
        try:
            print("üîß Inicializando PyQt6...")
            self.app = QApplication(sys.argv)
            self.app.setApplicationName("AlfaIA")
            print("‚úÖ PyQt6 inicializado")
            return True
        except Exception as e:
            print(f"‚ùå Error inicializando PyQt6: {e}")
            return False

    def initialize_database(self) -> bool:
        """Inicializar base de datos"""
        try:
            print("üóÑÔ∏è Inicializando BD...")
            db_manager = DatabaseManager()

            if not db_manager.test_connection():
                print("‚ùå No se pudo conectar a BD")
                return False

            print("‚úÖ BD inicializada")
            return True
        except Exception as e:
            print(f"‚ùå Error inicializando BD: {e}")
            return False

    def show_login_window(self) -> bool:
        """Mostrar ventana de login"""
        try:
            print("üîë Cargando login...")
            from ui.windows.login_window import LoginWindow

            self.login_window = LoginWindow()
            self.login_window.login_successful.connect(self.on_login_success)
            self.login_window.show()

            print("‚úÖ Login mostrado")
            return True
        except Exception as e:
            print(f"‚ùå Error cargando login: {e}")
            return False

    def on_login_success(self):
        """Manejar login exitoso - SIMPLE"""
        print("üéâ ¬°Login exitoso!")

        # Delay m√≠nimo para asegurar que el worker termine
        QTimer.singleShot(200, self.show_main_window)

    def show_main_window(self):
        """Mostrar ventana principal - SIMPLE"""
        try:
            print("üè† Mostrando ventana principal...")

            # Obtener usuario
            auth_manager = get_auth_manager()
            current_user = auth_manager.get_current_user_safe()

            if not current_user:
                print("‚ùå No se pudo obtener usuario")
                QMessageBox.warning(None, "Error", "No se pudo obtener informaci√≥n del usuario.")
                return

            print(f"‚úÖ Usuario: {current_user.nombre} {current_user.apellido}")

            # Crear ventana principal
            from ui.windows.main_window import MainWindow
            self.main_window = MainWindow(current_user)
            self.main_window.show()

            # Cerrar login
            if self.login_window:
                self.login_window.close()
                self.login_window = None

            print("üéâ ¬°Ventana principal mostrada!")

        except Exception as e:
            print(f"‚ùå Error mostrando ventana principal: {e}")
            import traceback
            traceback.print_exc()
            QMessageBox.critical(None, "Error", f"Error cr√≠tico:\n{str(e)}")

    def run(self) -> int:
        """Ejecutar aplicaci√≥n"""
        try:
            print("=" * 50)
            print("üéì ALFAIA SIMPLIFICADO")
            print("=" * 50)

            if not self.initialize_app():
                return 1

            if not self.initialize_database():
                return 1

            if not self.show_login_window():
                return 1

            print("üöÄ Ejecutando aplicaci√≥n...")
            return self.app.exec()

        except Exception as e:
            print(f"‚ùå Error fatal: {e}")
            import traceback
            traceback.print_exc()
            return 1

    def cleanup(self):
        """Limpiar recursos"""
        try:
            print("üßπ Limpiando...")
            if self.main_window:
                self.main_window.close()
            if self.login_window:
                self.login_window.close()
        except Exception as e:
            print(f"‚ö†Ô∏è Error en limpieza: {e}")


def main():
    """Funci√≥n principal simplificada"""
    app = SimpleAlfaIAApplication()
    exit_code = 0

    try:
        exit_code = app.run()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Interrumpido por usuario")
        exit_code = 0
    except Exception as e:
        print(f"\n‚ùå Error no manejado: {e}")
        exit_code = 1
    finally:
        app.cleanup()
        print(f"\nüèÅ Terminado con c√≥digo: {exit_code}")

    sys.exit(exit_code)


if __name__ == "__main__":
    main()